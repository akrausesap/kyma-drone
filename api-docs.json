{
    "swagger": "2.0",
    "info": {
      "version": "1.0.0",
      "title": "Kyma Drone",
      "description": "A simple API to controll remote controlled drones",
      "contact": {
        "name": "Johannes Engelke"
      },
      "license": {
        "name": "Apache 2.0"
      }
    },
    "host": "localhost",
    "basePath": "/",
    "schemes": [
      "http"
    ],
    "consumes": [
      "application/json"
    ],
    "produces": [
      "application/json"
    ],
    "paths": {
      "/start": {
        "post": {
          "description": "Start tells driver to get ready to do work",
          "operationId": "startDrone",
          "responses": {
            "204": {
              "description": "Drone started"
            },
            "default": {
              "description": "unexpected error",
              "schema": {
                "$ref": "#/definitions/ErrorModel"
              }
            }
          }
        }
      },
      "/stop": {
        "post": {
          "description": "Stop tells the drone to stop moving in any direction and simply hover in place",
          "operationId": "stopDrone",
          "responses": {
            "204": {
              "description": "Drone stoped"
            },
            "default": {
              "description": "unexpected error",
              "schema": {
                "$ref": "#/definitions/ErrorModel"
              }
            }
          }
        }
      },
      "/halt": {
        "post": {
          "description": "Halt stops minidrone driver",
          "operationId": "haltDrone",
          "responses": {
            "204": {
              "description": "Drone halted"
            },
            "default": {
              "description": "unexpected error",
              "schema": {
                "$ref": "#/definitions/ErrorModel"
              }
            }
          }
        }
      },
      "/takeOff": {
        "post": {
          "description": "TakeOff tells the Minidrone to takeoff",
          "operationId": "takeOffDrone",
          "responses": {
            "204": {
              "description": "Drone took off"
            },
            "default": {
              "description": "unexpected error",
              "schema": {
                "$ref": "#/definitions/ErrorModel"
              }
            }
          }
        }
      },
      "/land": {
        "post": {
          "description": "Land tells the Minidrone to land",
          "operationId": "landDrone",
          "responses": {
            "204": {
              "description": "Drone is landing"
            },
            "default": {
              "description": "unexpected error",
              "schema": {
                "$ref": "#/definitions/ErrorModel"
              }
            }
          }
        }
      },
      "/flatTrim": {
        "post": {
          "description": "FlatTrim tells the Minidrone to trim the sensors",
          "operationId": "flatTrimDrone",
          "responses": {
            "204": {
              "description": "Drone is trimmed"
            },
            "default": {
              "description": "unexpected error",
              "schema": {
                "$ref": "#/definitions/ErrorModel"
              }
            }
          }
        }
      },
      "/emergency": {
        "post": {
          "description": "Emergency tells the Minidrone to perform an emergency shutdown",
          "operationId": "emergencyDrone",
          "responses": {
            "204": {
              "description": "Drone is killed"
            },
            "default": {
              "description": "unexpected error",
              "schema": {
                "$ref": "#/definitions/ErrorModel"
              }
            }
          }
        }
      },
      "/takePicture": {
        "post": {
          "description": "TakePicture tells the Minidrone to take a picture",
          "operationId": "takePictureDrone",
          "responses": {
            "204": {
              "description": "Picture taken"
            },
            "default": {
              "description": "unexpected error",
              "schema": {
                "$ref": "#/definitions/ErrorModel"
              }
            }
          }
        }
      },
      "/frontFlip": {
        "post": {
          "description": "FrontFlip tells the Minidrone to do a Front Flip",
          "operationId": "frontFlipDrone",
          "responses": {
            "204": {
              "description": "Drone performed a flip"
            },
            "default": {
              "description": "unexpected error",
              "schema": {
                "$ref": "#/definitions/ErrorModel"
              }
            }
          }
        }
      },
      "/backFlip": {
        "post": {
          "description": "BackFlip tells the Minidrone to do a Back Flip",
          "operationId": "backFlipDrone",
          "responses": {
            "204": {
              "description": "Drone performed a flip"
            },
            "default": {
              "description": "unexpected error",
              "schema": {
                "$ref": "#/definitions/ErrorModel"
              }
            }
          }
        }
      },
      "/leftFlip": {
        "post": {
          "description": "LeftFlip tells the Minidrone to do a left Flip",
          "operationId": "leftFlipDrone",
          "responses": {
            "204": {
              "description": "Drone performed a flip"
            },
            "default": {
              "description": "unexpected error",
              "schema": {
                "$ref": "#/definitions/ErrorModel"
              }
            }
          }
        }
      },
      "/rightFlip": {
        "post": {
          "description": "RightFlip tells the Minidrone to do a Right Flip",
          "operationId": "rightFlipDrone",
          "responses": {
            "204": {
              "description": "Drone performed a flip"
            },
            "default": {
              "description": "unexpected error",
              "schema": {
                "$ref": "#/definitions/ErrorModel"
              }
            }
          }
        }
      },
      "/gunControl": {
        "post": {
          "description": "GunControl tells the Minidrone to shoot",
          "operationId": "gunControlDrone",
          "responses": {
            "204": {
              "description": "Drone shot the canno^"
            },
            "default": {
              "description": "unexpected error",
              "schema": {
                "$ref": "#/definitions/ErrorModel"
              }
            }
          }
        }
      },
      "/left": {
        "post": {
          "description": "Left tells drone to go left.",
          "operationId": "leftDrone",
          "parameters": [
            {
              "in":"body",
              "name":"value",
              "schema": {
                "$ref": "#/definitions/ValueModel"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Drone is turning left"
            },
            "default": {
              "description": "unexpected error",
              "schema": {
                "$ref": "#/definitions/ErrorModel"
              }
            }
          }
        }
      },
      "/right": {
        "post": {
          "description": "Right tells drone to go right.",
          "operationId": "rightDrone",
          "parameters": [
            {
              "in":"body",
              "name":"value",
              "schema": {
                "$ref": "#/definitions/ValueModel"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Drone is turning right"
            },
            "default": {
              "description": "unexpected error",
              "schema": {
                "$ref": "#/definitions/ErrorModel"
              }
            }
          }
        }
      },
      "/forward": {
        "post": {
          "description": "Forward tells drone to go forward.",
          "operationId": "forwardDrone",
          "parameters": [
            {
              "in":"body",
              "name":"value",
              "schema": {
                "$ref": "#/definitions/ValueModel"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Drone is turning forward"
            },
            "default": {
              "description": "unexpected error",
              "schema": {
                "$ref": "#/definitions/ErrorModel"
              }
            }
          }
        }
      },
      "/backward": {
        "post": {
          "description": "Backward tells drone to go backward.",
          "operationId": "backwardDrone",
          "parameters": [
            {
              "in":"body",
              "name":"value",
              "schema": {
                "$ref": "#/definitions/ValueModel"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Drone is turning backward"
            },
            "default": {
              "description": "unexpected error",
              "schema": {
                "$ref": "#/definitions/ErrorModel"
              }
            }
          }
        }
      },
      "/up": {
        "post": {
          "description": "Up tells drone to go up.",
          "operationId": "upDrone",
          "parameters": [
            {
              "in":"body",
              "name":"value",
              "schema": {
                "$ref": "#/definitions/ValueModel"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Drone is turning up"
            },
            "default": {
              "description": "unexpected error",
              "schema": {
                "$ref": "#/definitions/ErrorModel"
              }
            }
          }
        }
      },
      "/down": {
        "post": {
          "description": "Down tells drone to go down.",
          "operationId": "downDrone",
          "parameters": [
            {
              "in":"body",
              "name":"value",
              "schema": {
                "$ref": "#/definitions/ValueModel"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Drone is turning down"
            },
            "default": {
              "description": "unexpected error",
              "schema": {
                "$ref": "#/definitions/ErrorModel"
              }
            }
          }
        }
      },
      "/clockwise": {
        "post": {
          "description": "Clockwise tells drone to turn clockwise.",
          "operationId": "clockwiseDrone",
          "parameters": [
            {
              "in":"body",
              "name":"value",
              "schema": {
                "$ref": "#/definitions/ValueModel"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Drone is turning clockwise"
            },
            "default": {
              "description": "unexpected error",
              "schema": {
                "$ref": "#/definitions/ErrorModel"
              }
            }
          }
        }
      },
      "/counterClockwise": {
        "post": {
          "description": "CounterClockwise tells drone to go turn counter clockwise.",
          "operationId": "counterClockwiseDrone",
          "parameters": [
            {
              "in":"body",
              "name":"value",
              "schema": {
                "$ref": "#/definitions/ValueModel"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Drone is turning counter clockwise"
            },
            "default": {
              "description": "unexpected error",
              "schema": {
                "$ref": "#/definitions/ErrorModel"
              }
            }
          }
        }
      },
      "/lightControl": {
        "post": {
          "description": "LightControl tells drone to set the light mode.",
          "operationId": "lightControlDrone",
          "parameters": [
            {
              "in":"body",
              "name":"value",
              "description": "mode - either LightFixed, LightBlinked, or LightOscillated \n intensity - Light intensity from 0 (OFF) to 100 (Max intensity).",
              "schema": {
                "$ref": "#/definitions/LightModel"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Drone is setting the lights"
            },
            "default": {
              "description": "unexpected error",
              "schema": {
                "$ref": "#/definitions/ErrorModel"
              }
            }
          }
        }
      },
      "/clawControl": {
        "post": {
          "description": "ClawControl tells drone to open or close the claw.",
          "operationId": "clawControlDrone",
          "parameters": [
            {
              "in":"body",
              "name":"value",
              "description": "mode - either ClawOpen or ClawClosed",
              "schema": {
                "$ref": "#/definitions/ClawModel"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Drone is setting the lights"
            },
            "default": {
              "description": "unexpected error",
              "schema": {
                "$ref": "#/definitions/ErrorModel"
              }
            }
          }
        }
      }
    },
    "definitions": {
      "ValueModel": {
        "type": "object",
        "required": [
            "value"
        ],
        "properties": {
            "value": {
                "type": "integer",
                "format": "int32",
                "minimum": 0,
                "maximum": 100
            }
        }
      },
      "LightModel": {
        "type": "object",
        "required": [
            "mode",
            "intensity"
        ],
        "properties": {
            "mode": {
                "type": "string"
            },
            "intensity":{
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "maximum": 100
            }
        }
      },
      "ClawModel": {
        "type": "object",
        "required": [
            "mode"
        ],
        "properties": {
            "mode": {
                "type": "string"
            }
        }
      },
      "ErrorModel": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    }
  }

