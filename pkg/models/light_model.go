// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LightModel light model
// swagger:model LightModel
type LightModel struct {

	// intensity
	// Required: true
	// Maximum: 100
	// Minimum: 0
	Intensity *int32 `json:"intensity"`

	// mode
	// Required: true
	Mode *string `json:"mode"`
}

// Validate validates this light model
func (m *LightModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIntensity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LightModel) validateIntensity(formats strfmt.Registry) error {

	if err := validate.Required("intensity", "body", m.Intensity); err != nil {
		return err
	}

	if err := validate.MinimumInt("intensity", "body", int64(*m.Intensity), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("intensity", "body", int64(*m.Intensity), 100, false); err != nil {
		return err
	}

	return nil
}

func (m *LightModel) validateMode(formats strfmt.Registry) error {

	if err := validate.Required("mode", "body", m.Mode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LightModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LightModel) UnmarshalBinary(b []byte) error {
	var res LightModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
