// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/joek/kyma-drone/pkg/models"
)

// ClockwiseDroneNoContentCode is the HTTP code returned for type ClockwiseDroneNoContent
const ClockwiseDroneNoContentCode int = 204

/*ClockwiseDroneNoContent Drone is turning clockwise

swagger:response clockwiseDroneNoContent
*/
type ClockwiseDroneNoContent struct {
}

// NewClockwiseDroneNoContent creates ClockwiseDroneNoContent with default headers values
func NewClockwiseDroneNoContent() *ClockwiseDroneNoContent {

	return &ClockwiseDroneNoContent{}
}

// WriteResponse to the client
func (o *ClockwiseDroneNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

/*ClockwiseDroneDefault unexpected error

swagger:response clockwiseDroneDefault
*/
type ClockwiseDroneDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.ErrorModel `json:"body,omitempty"`
}

// NewClockwiseDroneDefault creates ClockwiseDroneDefault with default headers values
func NewClockwiseDroneDefault(code int) *ClockwiseDroneDefault {
	if code <= 0 {
		code = 500
	}

	return &ClockwiseDroneDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the clockwise drone default response
func (o *ClockwiseDroneDefault) WithStatusCode(code int) *ClockwiseDroneDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the clockwise drone default response
func (o *ClockwiseDroneDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the clockwise drone default response
func (o *ClockwiseDroneDefault) WithPayload(payload *models.ErrorModel) *ClockwiseDroneDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the clockwise drone default response
func (o *ClockwiseDroneDefault) SetPayload(payload *models.ErrorModel) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ClockwiseDroneDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
