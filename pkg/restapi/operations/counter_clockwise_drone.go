// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CounterClockwiseDroneHandlerFunc turns a function with the right signature into a counter clockwise drone handler
type CounterClockwiseDroneHandlerFunc func(CounterClockwiseDroneParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CounterClockwiseDroneHandlerFunc) Handle(params CounterClockwiseDroneParams) middleware.Responder {
	return fn(params)
}

// CounterClockwiseDroneHandler interface for that can handle valid counter clockwise drone params
type CounterClockwiseDroneHandler interface {
	Handle(CounterClockwiseDroneParams) middleware.Responder
}

// NewCounterClockwiseDrone creates a new http.Handler for the counter clockwise drone operation
func NewCounterClockwiseDrone(ctx *middleware.Context, handler CounterClockwiseDroneHandler) *CounterClockwiseDrone {
	return &CounterClockwiseDrone{Context: ctx, Handler: handler}
}

/*CounterClockwiseDrone swagger:route POST /counterClockwise counterClockwiseDrone

CounterClockwise tells drone to go turn counter clockwise.

*/
type CounterClockwiseDrone struct {
	Context *middleware.Context
	Handler CounterClockwiseDroneHandler
}

func (o *CounterClockwiseDrone) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCounterClockwiseDroneParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
