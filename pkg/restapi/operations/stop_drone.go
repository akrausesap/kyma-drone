// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// StopDroneHandlerFunc turns a function with the right signature into a stop drone handler
type StopDroneHandlerFunc func(StopDroneParams) middleware.Responder

// Handle executing the request and returning a response
func (fn StopDroneHandlerFunc) Handle(params StopDroneParams) middleware.Responder {
	return fn(params)
}

// StopDroneHandler interface for that can handle valid stop drone params
type StopDroneHandler interface {
	Handle(StopDroneParams) middleware.Responder
}

// NewStopDrone creates a new http.Handler for the stop drone operation
func NewStopDrone(ctx *middleware.Context, handler StopDroneHandler) *StopDrone {
	return &StopDrone{Context: ctx, Handler: handler}
}

/*StopDrone swagger:route POST /stop stopDrone

Stop tells the drone to stop moving in any direction and simply hover in place

*/
type StopDrone struct {
	Context *middleware.Context
	Handler StopDroneHandler
}

func (o *StopDrone) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewStopDroneParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
