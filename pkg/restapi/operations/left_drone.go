// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// LeftDroneHandlerFunc turns a function with the right signature into a left drone handler
type LeftDroneHandlerFunc func(LeftDroneParams) middleware.Responder

// Handle executing the request and returning a response
func (fn LeftDroneHandlerFunc) Handle(params LeftDroneParams) middleware.Responder {
	return fn(params)
}

// LeftDroneHandler interface for that can handle valid left drone params
type LeftDroneHandler interface {
	Handle(LeftDroneParams) middleware.Responder
}

// NewLeftDrone creates a new http.Handler for the left drone operation
func NewLeftDrone(ctx *middleware.Context, handler LeftDroneHandler) *LeftDrone {
	return &LeftDrone{Context: ctx, Handler: handler}
}

/*LeftDrone swagger:route POST /left leftDrone

Left tells drone to go left.

*/
type LeftDrone struct {
	Context *middleware.Context
	Handler LeftDroneHandler
}

func (o *LeftDrone) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewLeftDroneParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
