// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/joek/kyma-drone/pkg/models"
)

// HaltDroneNoContentCode is the HTTP code returned for type HaltDroneNoContent
const HaltDroneNoContentCode int = 204

/*HaltDroneNoContent Drone halted

swagger:response haltDroneNoContent
*/
type HaltDroneNoContent struct {
}

// NewHaltDroneNoContent creates HaltDroneNoContent with default headers values
func NewHaltDroneNoContent() *HaltDroneNoContent {

	return &HaltDroneNoContent{}
}

// WriteResponse to the client
func (o *HaltDroneNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

/*HaltDroneDefault unexpected error

swagger:response haltDroneDefault
*/
type HaltDroneDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.ErrorModel `json:"body,omitempty"`
}

// NewHaltDroneDefault creates HaltDroneDefault with default headers values
func NewHaltDroneDefault(code int) *HaltDroneDefault {
	if code <= 0 {
		code = 500
	}

	return &HaltDroneDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the halt drone default response
func (o *HaltDroneDefault) WithStatusCode(code int) *HaltDroneDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the halt drone default response
func (o *HaltDroneDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the halt drone default response
func (o *HaltDroneDefault) WithPayload(payload *models.ErrorModel) *HaltDroneDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the halt drone default response
func (o *HaltDroneDefault) SetPayload(payload *models.ErrorModel) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *HaltDroneDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
