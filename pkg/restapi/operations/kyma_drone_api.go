// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewKymaDroneAPI creates a new KymaDrone instance
func NewKymaDroneAPI(spec *loads.Document) *KymaDroneAPI {
	return &KymaDroneAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		BackFlipDroneHandler: BackFlipDroneHandlerFunc(func(params BackFlipDroneParams) middleware.Responder {
			return middleware.NotImplemented("operation BackFlipDrone has not yet been implemented")
		}),
		BackwardDroneHandler: BackwardDroneHandlerFunc(func(params BackwardDroneParams) middleware.Responder {
			return middleware.NotImplemented("operation BackwardDrone has not yet been implemented")
		}),
		ClawControlDroneHandler: ClawControlDroneHandlerFunc(func(params ClawControlDroneParams) middleware.Responder {
			return middleware.NotImplemented("operation ClawControlDrone has not yet been implemented")
		}),
		ClockwiseDroneHandler: ClockwiseDroneHandlerFunc(func(params ClockwiseDroneParams) middleware.Responder {
			return middleware.NotImplemented("operation ClockwiseDrone has not yet been implemented")
		}),
		CounterClockwiseDroneHandler: CounterClockwiseDroneHandlerFunc(func(params CounterClockwiseDroneParams) middleware.Responder {
			return middleware.NotImplemented("operation CounterClockwiseDrone has not yet been implemented")
		}),
		DownDroneHandler: DownDroneHandlerFunc(func(params DownDroneParams) middleware.Responder {
			return middleware.NotImplemented("operation DownDrone has not yet been implemented")
		}),
		EmergencyDroneHandler: EmergencyDroneHandlerFunc(func(params EmergencyDroneParams) middleware.Responder {
			return middleware.NotImplemented("operation EmergencyDrone has not yet been implemented")
		}),
		FlatTrimDroneHandler: FlatTrimDroneHandlerFunc(func(params FlatTrimDroneParams) middleware.Responder {
			return middleware.NotImplemented("operation FlatTrimDrone has not yet been implemented")
		}),
		ForwardDroneHandler: ForwardDroneHandlerFunc(func(params ForwardDroneParams) middleware.Responder {
			return middleware.NotImplemented("operation ForwardDrone has not yet been implemented")
		}),
		FrontFlipDroneHandler: FrontFlipDroneHandlerFunc(func(params FrontFlipDroneParams) middleware.Responder {
			return middleware.NotImplemented("operation FrontFlipDrone has not yet been implemented")
		}),
		GunControlDroneHandler: GunControlDroneHandlerFunc(func(params GunControlDroneParams) middleware.Responder {
			return middleware.NotImplemented("operation GunControlDrone has not yet been implemented")
		}),
		HaltDroneHandler: HaltDroneHandlerFunc(func(params HaltDroneParams) middleware.Responder {
			return middleware.NotImplemented("operation HaltDrone has not yet been implemented")
		}),
		LandDroneHandler: LandDroneHandlerFunc(func(params LandDroneParams) middleware.Responder {
			return middleware.NotImplemented("operation LandDrone has not yet been implemented")
		}),
		LeftDroneHandler: LeftDroneHandlerFunc(func(params LeftDroneParams) middleware.Responder {
			return middleware.NotImplemented("operation LeftDrone has not yet been implemented")
		}),
		LeftFlipDroneHandler: LeftFlipDroneHandlerFunc(func(params LeftFlipDroneParams) middleware.Responder {
			return middleware.NotImplemented("operation LeftFlipDrone has not yet been implemented")
		}),
		LightControlDroneHandler: LightControlDroneHandlerFunc(func(params LightControlDroneParams) middleware.Responder {
			return middleware.NotImplemented("operation LightControlDrone has not yet been implemented")
		}),
		RightDroneHandler: RightDroneHandlerFunc(func(params RightDroneParams) middleware.Responder {
			return middleware.NotImplemented("operation RightDrone has not yet been implemented")
		}),
		RightFlipDroneHandler: RightFlipDroneHandlerFunc(func(params RightFlipDroneParams) middleware.Responder {
			return middleware.NotImplemented("operation RightFlipDrone has not yet been implemented")
		}),
		StartDroneHandler: StartDroneHandlerFunc(func(params StartDroneParams) middleware.Responder {
			return middleware.NotImplemented("operation StartDrone has not yet been implemented")
		}),
		StopDroneHandler: StopDroneHandlerFunc(func(params StopDroneParams) middleware.Responder {
			return middleware.NotImplemented("operation StopDrone has not yet been implemented")
		}),
		TakeOffDroneHandler: TakeOffDroneHandlerFunc(func(params TakeOffDroneParams) middleware.Responder {
			return middleware.NotImplemented("operation TakeOffDrone has not yet been implemented")
		}),
		TakePictureDroneHandler: TakePictureDroneHandlerFunc(func(params TakePictureDroneParams) middleware.Responder {
			return middleware.NotImplemented("operation TakePictureDrone has not yet been implemented")
		}),
		UpDroneHandler: UpDroneHandlerFunc(func(params UpDroneParams) middleware.Responder {
			return middleware.NotImplemented("operation UpDrone has not yet been implemented")
		}),
	}
}

/*KymaDroneAPI A simple API to controll remote controlled drones */
type KymaDroneAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// BackFlipDroneHandler sets the operation handler for the back flip drone operation
	BackFlipDroneHandler BackFlipDroneHandler
	// BackwardDroneHandler sets the operation handler for the backward drone operation
	BackwardDroneHandler BackwardDroneHandler
	// ClawControlDroneHandler sets the operation handler for the claw control drone operation
	ClawControlDroneHandler ClawControlDroneHandler
	// ClockwiseDroneHandler sets the operation handler for the clockwise drone operation
	ClockwiseDroneHandler ClockwiseDroneHandler
	// CounterClockwiseDroneHandler sets the operation handler for the counter clockwise drone operation
	CounterClockwiseDroneHandler CounterClockwiseDroneHandler
	// DownDroneHandler sets the operation handler for the down drone operation
	DownDroneHandler DownDroneHandler
	// EmergencyDroneHandler sets the operation handler for the emergency drone operation
	EmergencyDroneHandler EmergencyDroneHandler
	// FlatTrimDroneHandler sets the operation handler for the flat trim drone operation
	FlatTrimDroneHandler FlatTrimDroneHandler
	// ForwardDroneHandler sets the operation handler for the forward drone operation
	ForwardDroneHandler ForwardDroneHandler
	// FrontFlipDroneHandler sets the operation handler for the front flip drone operation
	FrontFlipDroneHandler FrontFlipDroneHandler
	// GunControlDroneHandler sets the operation handler for the gun control drone operation
	GunControlDroneHandler GunControlDroneHandler
	// HaltDroneHandler sets the operation handler for the halt drone operation
	HaltDroneHandler HaltDroneHandler
	// LandDroneHandler sets the operation handler for the land drone operation
	LandDroneHandler LandDroneHandler
	// LeftDroneHandler sets the operation handler for the left drone operation
	LeftDroneHandler LeftDroneHandler
	// LeftFlipDroneHandler sets the operation handler for the left flip drone operation
	LeftFlipDroneHandler LeftFlipDroneHandler
	// LightControlDroneHandler sets the operation handler for the light control drone operation
	LightControlDroneHandler LightControlDroneHandler
	// RightDroneHandler sets the operation handler for the right drone operation
	RightDroneHandler RightDroneHandler
	// RightFlipDroneHandler sets the operation handler for the right flip drone operation
	RightFlipDroneHandler RightFlipDroneHandler
	// StartDroneHandler sets the operation handler for the start drone operation
	StartDroneHandler StartDroneHandler
	// StopDroneHandler sets the operation handler for the stop drone operation
	StopDroneHandler StopDroneHandler
	// TakeOffDroneHandler sets the operation handler for the take off drone operation
	TakeOffDroneHandler TakeOffDroneHandler
	// TakePictureDroneHandler sets the operation handler for the take picture drone operation
	TakePictureDroneHandler TakePictureDroneHandler
	// UpDroneHandler sets the operation handler for the up drone operation
	UpDroneHandler UpDroneHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *KymaDroneAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *KymaDroneAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *KymaDroneAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *KymaDroneAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *KymaDroneAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *KymaDroneAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *KymaDroneAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the KymaDroneAPI
func (o *KymaDroneAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.BackFlipDroneHandler == nil {
		unregistered = append(unregistered, "BackFlipDroneHandler")
	}

	if o.BackwardDroneHandler == nil {
		unregistered = append(unregistered, "BackwardDroneHandler")
	}

	if o.ClawControlDroneHandler == nil {
		unregistered = append(unregistered, "ClawControlDroneHandler")
	}

	if o.ClockwiseDroneHandler == nil {
		unregistered = append(unregistered, "ClockwiseDroneHandler")
	}

	if o.CounterClockwiseDroneHandler == nil {
		unregistered = append(unregistered, "CounterClockwiseDroneHandler")
	}

	if o.DownDroneHandler == nil {
		unregistered = append(unregistered, "DownDroneHandler")
	}

	if o.EmergencyDroneHandler == nil {
		unregistered = append(unregistered, "EmergencyDroneHandler")
	}

	if o.FlatTrimDroneHandler == nil {
		unregistered = append(unregistered, "FlatTrimDroneHandler")
	}

	if o.ForwardDroneHandler == nil {
		unregistered = append(unregistered, "ForwardDroneHandler")
	}

	if o.FrontFlipDroneHandler == nil {
		unregistered = append(unregistered, "FrontFlipDroneHandler")
	}

	if o.GunControlDroneHandler == nil {
		unregistered = append(unregistered, "GunControlDroneHandler")
	}

	if o.HaltDroneHandler == nil {
		unregistered = append(unregistered, "HaltDroneHandler")
	}

	if o.LandDroneHandler == nil {
		unregistered = append(unregistered, "LandDroneHandler")
	}

	if o.LeftDroneHandler == nil {
		unregistered = append(unregistered, "LeftDroneHandler")
	}

	if o.LeftFlipDroneHandler == nil {
		unregistered = append(unregistered, "LeftFlipDroneHandler")
	}

	if o.LightControlDroneHandler == nil {
		unregistered = append(unregistered, "LightControlDroneHandler")
	}

	if o.RightDroneHandler == nil {
		unregistered = append(unregistered, "RightDroneHandler")
	}

	if o.RightFlipDroneHandler == nil {
		unregistered = append(unregistered, "RightFlipDroneHandler")
	}

	if o.StartDroneHandler == nil {
		unregistered = append(unregistered, "StartDroneHandler")
	}

	if o.StopDroneHandler == nil {
		unregistered = append(unregistered, "StopDroneHandler")
	}

	if o.TakeOffDroneHandler == nil {
		unregistered = append(unregistered, "TakeOffDroneHandler")
	}

	if o.TakePictureDroneHandler == nil {
		unregistered = append(unregistered, "TakePictureDroneHandler")
	}

	if o.UpDroneHandler == nil {
		unregistered = append(unregistered, "UpDroneHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *KymaDroneAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *KymaDroneAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *KymaDroneAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *KymaDroneAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *KymaDroneAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *KymaDroneAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the kyma drone API
func (o *KymaDroneAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *KymaDroneAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/backFlip"] = NewBackFlipDrone(o.context, o.BackFlipDroneHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/backward"] = NewBackwardDrone(o.context, o.BackwardDroneHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/clawControl"] = NewClawControlDrone(o.context, o.ClawControlDroneHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/clockwise"] = NewClockwiseDrone(o.context, o.ClockwiseDroneHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/counterClockwise"] = NewCounterClockwiseDrone(o.context, o.CounterClockwiseDroneHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/down"] = NewDownDrone(o.context, o.DownDroneHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/emergency"] = NewEmergencyDrone(o.context, o.EmergencyDroneHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/flatTrim"] = NewFlatTrimDrone(o.context, o.FlatTrimDroneHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/forward"] = NewForwardDrone(o.context, o.ForwardDroneHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/frontFlip"] = NewFrontFlipDrone(o.context, o.FrontFlipDroneHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/gunControl"] = NewGunControlDrone(o.context, o.GunControlDroneHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/halt"] = NewHaltDrone(o.context, o.HaltDroneHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/land"] = NewLandDrone(o.context, o.LandDroneHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/left"] = NewLeftDrone(o.context, o.LeftDroneHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/leftFlip"] = NewLeftFlipDrone(o.context, o.LeftFlipDroneHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/lightControl"] = NewLightControlDrone(o.context, o.LightControlDroneHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/right"] = NewRightDrone(o.context, o.RightDroneHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rightFlip"] = NewRightFlipDrone(o.context, o.RightFlipDroneHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/start"] = NewStartDrone(o.context, o.StartDroneHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/stop"] = NewStopDrone(o.context, o.StopDroneHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/takeOff"] = NewTakeOffDrone(o.context, o.TakeOffDroneHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/takePicture"] = NewTakePictureDrone(o.context, o.TakePictureDroneHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/up"] = NewUpDrone(o.context, o.UpDroneHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *KymaDroneAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *KymaDroneAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *KymaDroneAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *KymaDroneAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
